---
description: 
globs: **/*.css, **/*.scss, **/*.tsx, **/*.jsx, tailwind.config.js, tailwind.config.ts
alwaysApply: false
---
# Tailwind CSS ベストプラクティス

## プロジェクトのセットアップ
- 適切なTailwind設定を使用する
- テーマエクステンションを適切に設定する
- 適切なパージ設定を行う
- 適切なプラグインの統合
- カスタムスペースとブレークポイントの設定
- 適切なカラーパレットの設定

## コンポーネントのスタイリング
- カスタムCSSよりもユーティリティクラスを使う
- 必要に応じて、@applyで関連するユーティリティをグループ化する
- 適切なレスポンシブデザインユーティリティを使用する
- ダークモードを適切に実装する
- 適切なステートバリアントを使用する
- コンポーネントスタイルの一貫性を保つ

## レイアウト
- FlexboxとGridユーティリティを効果的に使用する
- 適切なスペーシングシステムを実装する
- 必要に応じてコンテナクエリを使用する
- 適切なレスポンシブ・ブレークポイントを導入する
- 適切なパディングとマージンユーティリティを使用する
- 適切なアライメントユーティリティを使用する

## タイポグラフィ
- 適切なフォントサイズユーティリティを使用する
- 適切な行の高さを実装する
- 適切なフォントウェイトユーティリティの使用
- カスタムフォントを適切に設定する
- 適切な文字揃え
- 適切な文字装飾の実装

## 色
- セマンティックカラーネーミングを使用する
- 適切なカラーコントラストの使用
- 不透明度ユーティリティを効果的に使う
- カスタムカラーを適切に設定する
- 適切なグラデーションユーティリティの使用
- 適切なホバー状態の実装

## コンポーネント
- コンポーネントを適切に拡張する
- コンポーネントのバリエーションを統一する
- 適切なアニメーションを実装する
- 適切なトランジション・ユーティリティを使用する
- アクセシビリティに配慮する

## レスポンシブデザイン
- モバイルファーストアプローチを使用する
- 適切なブレークポイントの導入
- コンテナクエリを効果的に使用する
- 異なる画面サイズを適切に扱う
- 適切なレスポンシブタイポグラフィを実装する
- 適切なレスポンシブ・スペーシングの使用

## パフォーマンス
- 適切なパージ設定を使用する
- カスタムCSSを最小限にする
- 適切なキャッシュ戦略を使用する
- 適切なコード分割の実装
- プロダクション用に最適化する
- バンドルサイズの監視

## ベストプラクティス
- 命名規則に従う
- スタイルを整理する
- 適切なドキュメントを使用する
- 適切なテストを実施する
- アクセシビリティガイドラインに従う
- 適切なバージョン管理を行う 