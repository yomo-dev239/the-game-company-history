---
description: 
globs: **/*.tsx, **/*.jsx, components/**/*
alwaysApply: false
---
# React ベストプラクティス

## コンポーネント構造
- クラスコンポーネントよりも機能コンポーネントを使用する
- コンポーネントは小さく、集中させる
- 再利用可能なロジックはカスタムフックに抽出する
- 継承よりもコンポジションを使う
- TypeScriptで適切なprop型を実装する
- 大きなコンポーネントを小さく分割する

## フック
- フックのルールに従う
- 再利用可能なロジックにはカスタムフックを使う
- フックは、焦点を絞ったシンプルなものにする
- useEffectで適切な依存関係の配列を使用する
- 必要に応じて、useEffectでクリーンアップを実装する
- フックの入れ子は避ける

## ステート管理
- ローカルコンポーネントの状態にはuseStateを使用する
- 複雑なステートロジックには useReducer を実装する
- 共有ステートにはContext APIを使用する
- ステートをできるだけ使用する場所に近づける
- 適切な状態管理により、プロップの穴あけを避ける
- 状態管理ライブラリは必要なときだけ使う

## パフォーマンス
- 不要な再レンダリングを避ける
- 適切な遅延ロードを実装する
- リストで適切なキープロプを使用する
- プロファイルを作成し、レンダリングパフォーマンスを最適化する

## エラー処理
- エラー境界の実装
- 非同期エラーを適切に処理する
- ユーザーフレンドリーなエラーメッセージの表示
- 適切なフォールバック UI の実装
- 適切なエラーログ
- エッジケースを優雅に処理する

## テスト
- コンポーネントの単体テストを書く
- 複雑なフローの統合テストを実装する
- Reactテストライブラリの使用
- ユーザーとのインタラクションをテストする
- エラーシナリオをテストする
- 適切なモックデータの実装

## アクセシビリティ
- セマンティックなHTML要素を使用する
- 適切なARIA属性を実装する
- キーボードナビゲーションを確実にする
- スクリーンリーダーによるテスト
- フォーカスの管理
- 画像に適切なaltテキストを提供する

## コード構成
- 関連するコンポーネントをグループ化する
- 適切なファイル命名規則を使用する
- 適切なディレクトリ構造を実装する
- スタイルをコンポーネントに近づける
- 適切なインポート/エクスポートを使用する
- 複雑なコンポーネント・ロジックを文書化する 