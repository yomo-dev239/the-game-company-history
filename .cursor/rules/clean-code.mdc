---
description: 
globs: 
alwaysApply: true
---
# クリーンコードガイドライン

## マジックナンバーを超える定数
- ハードコードされた値を名前付き定数に置き換える
- 値の目的を説明する、説明的な定数名を使用する
- 定数はファイルの先頭か、専用の定数ファイルに置く

## 意味のある名前
- 変数、関数、クラスは、その目的を明らかにする
- 名前は、なぜそれが存在し、どのように使われるのかを説明するものでなければならない
- 普遍的に理解できる場合を除き、略語は避ける

## 賢いコメント
- コードが何をするかについてコメントしない - コードを自己文書化する
- なぜそのようにするのかを説明するためにコメントを使う
- API、複雑なアルゴリズム、明らかでない副作用を文書化する

## 単一責任
- 各関数は正確に1つのことを行う
- 関数は小さく、焦点を絞る
- 関数が何をするのかを説明するためにコメントが必要な場合は、その関数を分割すべきである

## DRY (Don't Repeat Yourself)
- 繰り返されるコードを再利用可能な関数に抽出する
- 適切な抽象化によって共通のロジックを共有する
- 単一の真理源を維持する

## クリーンな構造
- 関連するコードをまとめる
- 論理的な階層構造でコードを整理する
- ファイルやフォルダの命名規則を統一する

## カプセル化
- 実装の詳細を隠す
- 明確なインターフェースの公開
- ネストされた条件分岐を、きちんと名前が付けられた関数に移す

## コード品質の維持
- 継続的なリファクタリング
- 技術的負債を早期に修正する
- 見つけたときよりもきれいなコードを残す

## テスト
- バグを修正する前にテストを書く
- 読みやすく保守しやすいテストを心がける
- エッジケースやエラー条件をテストする