---
description: 
globs: **/*.ts, **/*.tsx, **/*.d.ts
alwaysApply: false
---
# TypeScript ベストプラクティス

## 型システム
- オブジェクトの定義には型よりもインターフェイスを優先
- ユニオン、交差、マップされた型には型を使用する
- `any`の使用は避け、未知の型には`unknown`を使用する
- TypeScript の設定を厳密に行う
- TypeScript 組み込みのユーティリティ型を活用する
- 再利用可能な型パターンにはジェネリクスを使用する

## コードの整理
- 型定義は使用する場所の近くに置く
- 共有する場合は、専用の型ファイルから型とインターフェースをエクスポートする
- エクスポートの整理には、バレルエクスポート（index.ts）を使用する
- 共有される型は `types` ディレクトリに置く
- コンポーネントのpropをコンポーネントと一緒に配置する

## 関数
- パブリック関数には明示的な戻り値の型を使用する
- コールバックとメソッドにはアロー関数を使用する
- カスタムエラー型で適切なエラー処理を実装する
- 複雑な型のシナリオには関数のオーバーロードを使用する
- Promisesよりもasync/awaitを優先する。

## ベストプラクティス
- tsconfig.jsonでstrictモードを有効にする
- イミュータブル・プロパティにはreadonlyを使う
- 型の安全性を確保するために、差別化ユニオンを活用する
- 実行時の型チェックには型ガードを使う
- 適切なNULLチェックの実装
- 必要な場合を除き、型アサーションを避ける

## エラー処理
- ドメイン固有のエラーのためにカスタムエラー型を作成する
- 失敗する可能性のある操作には結果型を使用する
- 適切なエラー境界を実装する
- 型付き catch 節のある try-catch ブロックを使用する
- プロミスの拒否を適切に処理する

## パターン
- 複雑なオブジェクトの作成には Builder パターンを使用する
- データアクセスのためにRepositoryパターンを実装する
- オブジェクトの生成にはFactoryパターンを使用する
- 依存性注入を活用する
- カプセル化にはModuleパターンを使う 