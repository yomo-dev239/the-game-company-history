---
description: 
globs: **/*.tsx, **/*.ts, src/**/*.ts, src/**/*.tsx
alwaysApply: false
---
# Next.js ベストプラクティス

## コンポーネント
- デフォルトでサーバーコンポーネントを使用する
- クライアントコンポーネントは 'use client' で明示的にマークする
- クライアントコンポーネントをフォールバック付きのサスペンスでラップする
- 重要でないコンポーネントには動的ロードを使用する
- 適切なエラー境界を実装する
- 静的コンテンツとインターフェースをファイル末尾に配置する

## パフォーマンス
- 画像の最適化： WebP フォーマット、サイズデータ、遅延ロードを使用する
- useEffect' と 'setState' の使用を最小限にする
- 可能な限りサーバーコンポーネント (RSC) を優先する
- 重要でないコンポーネントには動的ローディングを使用する
- 適切なキャッシュ戦略の実装

## データ・フェッチ
- 可能であれば、データ取得にサーバーコンポーネントを使用する
- データ取得時の適切なエラー処理の実装
- 適切なキャッシュ戦略の使用
- 読み込みとエラー状態の適切な処理

## ルーティング
- アプリルーターの規約を使用する
- ルートの適切なロードとエラー状態を実装する
- 動的なルートを適切に使用する
- 必要に応じて並列ルートを扱う

## フォームとバリデーション
- フォームバリデーションにZodを使う
- 適切なサーバーサイドバリデーションを実装する
- フォームエラーを適切に処理する
- フォーム送信時にロード状態を表示する

## ステート管理
- クライアントサイドの状態を最小限にする
- Reactコンテキストの使用は控えめに
- 可能な限りサーバーの状態を優先する
- 適切なロード状態を実装する 